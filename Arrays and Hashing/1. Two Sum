1. Two Sum - https://leetcode.com/problems/two-sum/description/

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> numMap;
        int n = nums.size();

        for (int i = 0; i < n; i++) {
            int complement = target - nums[i];
            if (numMap.count(complement)) {
                return {numMap[complement], i};
            }
            numMap[nums[i]] = i;
        }

        return {}; // No solution found
    }
};

Example
Consider the input nums = [2, 7, 11, 15] and target = 9.

Initialize numMap to be empty and n = 4.
Loop starts with i = 0:
Current number is 2.
Complement = 9 - 2 = 7.
7 is not in numMap, so add 2 with index 0 to numMap.
Next iteration, i = 1:
Current number is 7.
Complement = 9 - 7 = 2.
2 is found in numMap (from the previous step, where we added 2 with index 0).
Since 2 exists, and its index is 0, the function returns {0, 1}.
This means the numbers at indices 0 and 1 in the nums vector (which are 2 and 7, respectively) add up to the target of 9.
